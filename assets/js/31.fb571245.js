(window.webpackJsonp=window.webpackJsonp||[]).push([[31],{309:function(n,e,s){"use strict";s.r(e);var t=s(14),a=Object(t.a)({},(function(){var n=this,e=n._self._c;return e("ContentSlotsDistributor",{attrs:{"slot-key":n.$parent.slotKey}},[e("h1",{attrs:{id:"vue-js-学习教程指南"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#vue-js-学习教程指南"}},[n._v("#")]),n._v(" Vue.js 学习教程指南")]),n._v(" "),e("p",[n._v("作者：@"),e("a",{attrs:{href:"https://www.zhihu.com/org/teng-xun-ji-zhu-gong-cheng",target:"_blank",rel:"noopener noreferrer"}},[n._v("腾讯技术工程"),e("OutboundLink")],1)]),n._v(" "),e("p",[n._v("分享一本腾讯工程师写的 《深入理解Vue.js实战》书。该书主要介绍了作者这些年来使用 Vue.js框架、前端开发的一些理解和经验积累，可以结合官方教程一起阅读。")]),n._v(" "),e("h2",{attrs:{id:"书籍结构和内容"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#书籍结构和内容"}},[n._v("#")]),n._v(" "),e("strong",[n._v("书籍结构和内容")])]),n._v(" "),e("p",[n._v("本书共分为两部分。")]),n._v(" "),e("h2",{attrs:{id:"第一部分-vue快速入门"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#第一部分-vue快速入门"}},[n._v("#")]),n._v(" "),e("strong",[n._v("第一部分 Vue快速入门")])]),n._v(" "),e("p",[n._v("该部分介绍Vue快速入门，结合Vue基础、Vue框架与设计，以及一些简单的代码实例来快速入门。包括8章内容：")]),n._v(" "),e("ul",[e("li",[e("strong",[e("a",{attrs:{href:"https://link.zhihu.com/?target=https%3A//godbasin.github.io/vue-ebook/vue-ebook/1.html",target:"_blank",rel:"noopener noreferrer"}},[n._v("第1章 Vue 框架介绍"),e("OutboundLink")],1)])]),n._v(" "),e("li",[e("strong",[e("a",{attrs:{href:"https://link.zhihu.com/?target=https%3A//godbasin.github.io/vue-ebook/vue-ebook/2.html",target:"_blank",rel:"noopener noreferrer"}},[n._v("第2章 Vue 环境快速搭建"),e("OutboundLink")],1)])]),n._v(" "),e("li",[e("strong",[e("a",{attrs:{href:"https://link.zhihu.com/?target=https%3A//godbasin.github.io/vue-ebook/vue-ebook/3.html",target:"_blank",rel:"noopener noreferrer"}},[n._v("第3章 Vue 基础介绍"),e("OutboundLink")],1)])]),n._v(" "),e("li",[e("strong",[e("a",{attrs:{href:"https://link.zhihu.com/?target=https%3A//godbasin.github.io/vue-ebook/vue-ebook/4.html",target:"_blank",rel:"noopener noreferrer"}},[n._v("第4章 Vue 组件的使用"),e("OutboundLink")],1)])]),n._v(" "),e("li",[e("strong",[e("a",{attrs:{href:"https://link.zhihu.com/?target=https%3A//godbasin.github.io/vue-ebook/vue-ebook/5.html",target:"_blank",rel:"noopener noreferrer"}},[n._v("第5章 常用指令和自定义指令"),e("OutboundLink")],1)])]),n._v(" "),e("li",[e("strong",[e("a",{attrs:{href:"https://link.zhihu.com/?target=https%3A//godbasin.github.io/vue-ebook/vue-ebook/6.html",target:"_blank",rel:"noopener noreferrer"}},[n._v("第6章 Vue 动画"),e("OutboundLink")],1)])]),n._v(" "),e("li",[e("strong",[e("a",{attrs:{href:"https://link.zhihu.com/?target=https%3A//godbasin.github.io/vue-ebook/vue-ebook/7.html",target:"_blank",rel:"noopener noreferrer"}},[n._v("第7章 Vue Router 路由搭建应用"),e("OutboundLink")],1)])]),n._v(" "),e("li",[e("strong",[e("a",{attrs:{href:"https://link.zhihu.com/?target=https%3A//godbasin.github.io/vue-ebook/vue-ebook/8.html",target:"_blank",rel:"noopener noreferrer"}},[n._v("第8章 实战：Todo List 从组件到应用"),e("OutboundLink")],1)])])]),n._v(" "),e("h2",{attrs:{id:"第二部分-vue的正确使用方式"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#第二部分-vue的正确使用方式"}},[n._v("#")]),n._v(" "),e("strong",[n._v("第二部分 Vue的正确使用方式")])]),n._v(" "),e("p",[n._v("该部分介绍Vue的正确使用方式，包括在日常开发中，常见的使用方式和项目实战。同样包括8章内容：")]),n._v(" "),e("ul",[e("li",[e("strong",[e("a",{attrs:{href:"https://link.zhihu.com/?target=https%3A//godbasin.github.io/vue-ebook/vue-ebook/9.html",target:"_blank",rel:"noopener noreferrer"}},[n._v("第9章 思维转变与大型项目管理"),e("OutboundLink")],1)])]),n._v(" "),e("li",[e("strong",[e("a",{attrs:{href:"https://link.zhihu.com/?target=https%3A//godbasin.github.io/vue-ebook/vue-ebook/10.html",target:"_blank",rel:"noopener noreferrer"}},[n._v("第10章 如何正确地进行抽象"),e("OutboundLink")],1)])]),n._v(" "),e("li",[e("strong",[e("a",{attrs:{href:"https://link.zhihu.com/?target=https%3A//godbasin.github.io/vue-ebook/vue-ebook/11.html",target:"_blank",rel:"noopener noreferrer"}},[n._v("第11章 全局数据管理与 Vuex"),e("OutboundLink")],1)])]),n._v(" "),e("li",[e("strong",[e("a",{attrs:{href:"https://link.zhihu.com/?target=https%3A//godbasin.github.io/vue-ebook/vue-ebook/12.html",target:"_blank",rel:"noopener noreferrer"}},[n._v("第12章 实战：三天开发一个管理端"),e("OutboundLink")],1)])]),n._v(" "),e("li",[e("strong",[e("a",{attrs:{href:"https://link.zhihu.com/?target=https%3A//godbasin.github.io/vue-ebook/vue-ebook/13.html",target:"_blank",rel:"noopener noreferrer"}},[n._v("第13章 实战：表单配置化实现"),e("OutboundLink")],1)])]),n._v(" "),e("li",[e("strong",[e("a",{attrs:{href:"https://link.zhihu.com/?target=https%3A//godbasin.github.io/vue-ebook/vue-ebook/14.html",target:"_blank",rel:"noopener noreferrer"}},[n._v("第14章 实战：使用 Webpack 或 Vue CLI 搭建多页应用"),e("OutboundLink")],1)])]),n._v(" "),e("li",[e("strong",[e("a",{attrs:{href:"https://link.zhihu.com/?target=https%3A//godbasin.github.io/vue-ebook/vue-ebook/15.html",target:"_blank",rel:"noopener noreferrer"}},[n._v("第15章 Vue 周边拓展"),e("OutboundLink")],1)])]),n._v(" "),e("li",[e("strong",[e("a",{attrs:{href:"https://link.zhihu.com/?target=https%3A//godbasin.github.io/vue-ebook/vue-ebook/16.html",target:"_blank",rel:"noopener noreferrer"}},[n._v("第16章 关于 Vue 3.0"),e("OutboundLink")],1)])])]),n._v(" "),e("blockquote",[e("p",[n._v("本书相关代码存放在Github "),e("strong",[e("a",{attrs:{href:"https://link.zhihu.com/?target=https%3A//github.com/godbasin/vue-ebook/tree/vue-sourcecode",target:"_blank",rel:"noopener noreferrer"}},[n._v("vue-sourcecode 分支"),e("OutboundLink")],1)]),n._v("，书中涉及的代码示例基本可以在这里找到。")])]),n._v(" "),e("p",[n._v("除此之外，本书还介绍了：")]),n._v(" "),e("ul",[e("li",[n._v("前端框架的出现，理解Vue.js框架原理")]),n._v(" "),e("li",[n._v("使用Vue.js解决大型项目的实践经验")]),n._v(" "),e("li",[n._v("如何高效、灵活地开发Vue.js应用")]),n._v(" "),e("li",[n._v("Vue.js相关拓展工具的使用")]),n._v(" "),e("li",[n._v("Vue3.0的设计和源码理解")]),n._v(" "),e("li",[n._v("前端项目选型要如何进行决策")])]),n._v(" "),e("h2",{attrs:{id:"第1章-vue-框架介绍"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#第1章-vue-框架介绍"}},[n._v("#")]),n._v(" "),e("strong",[n._v("第1章 Vue 框架介绍")])]),n._v(" "),e("p",[n._v("根据 Vue 官方的介绍，Vue 是一套用于构建用户界面的渐进式框架。与其它大型框架不同的是，Vue 被设计为可以自底向上逐层应用。Vue 的核心库只关注视图层，不仅易于上手，还便于与第三方库或既有项目整合。但 Vue 并不只是一个简单的视图库，通过与一系列周边工具的配合，它也可以轻易地构建大型应用。")]),n._v(" "),e("p",[n._v("所以 Vue 框架到底做了写什么呢？为什么几乎大多数前端都基本需要掌握呢？前言里也讲到了 jQuery 一把梭的时代，而大多数使用过 jQuery 的非前端人员，都有种“前端开发怎么这么多花样”的感觉。那要怎么理解 Vue 框架提供的能力，这些能力又是怎样提高开发人员的开发效率和代码维护性的呢？")]),n._v(" "),e("p",[e("strong",[n._v("模板引擎")]),n._v(" 模板引擎大概是 Vue 里最主要、又最核心的一个能力。前面也讲到，在模板引擎还没有出现的时候，前端需要手动更新前端页面的内容，需要维护一大堆的 HTML 和变量拼接的动态内容，虽然 jQuery 的出现提升了 DOM 元素的操作性，但依然难以避免代码的可读性、可维护性上存在的一些问题。")]),n._v(" "),e("p",[n._v("以前我们更新页面的内容，大概的流程是：监听操作 -> 获取数据变量 -> 使用数据拼接成 HTML 模板 -> 将 HTML 内容塞到页面对应的地方 -> 将 HTML 片段内需要监听的点击等事件进行绑定。")]),n._v(" "),e("p",[n._v("这么复杂的逻辑，如今使用 Vue，就可以方便地在模板里用插值表达式"),e("code",[n._v("{{}}")]),n._v("、"),e("code",[n._v("v-bind")]),n._v("绑定变量来展示，同时配合"),e("code",[n._v("v-if")]),n._v("、"),e("code",[n._v("v-for")]),n._v("这些内置指令，就可以很方便地写出可读性和维护性都很不错的代码了。什么是插值表达式？什么是指令？这些我们会放在后面的章节里介绍。这里我们主要来介绍下 Vue 框架做了什么事情，这里先讲一下数据绑定。")]),n._v(" "),e("p",[n._v("我们在 Vue 里渲染一块内容，一般会有以下流程： (1) 解析语法生成 AST。 (2) 根据 AST 结果，完成 data 数据初始化。 (3) 根据 AST 结果和 data 数据绑定情况，生成虚拟 DOM。 (4) 将虚拟 DOM 生成真正的 DOM 插入到页面中，此时页面会被渲染。")]),n._v(" "),e("p",[n._v("这样的过程要怎么去理解呢，我们一点点来看。")]),n._v(" "),e("h2",{attrs:{id:"_1-1-解析语法生成-ast"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_1-1-解析语法生成-ast"}},[n._v("#")]),n._v(" "),e("strong",[n._v("1.1 解析语法生成 AST")])]),n._v(" "),e("p",[n._v("抽象语法树（Abstract Syntax Tree）也称为 AST 语法树，指的是源代码语法所对应的树状结构。也就是说，对于一种具体编程语言下的源代码，通过构建语法树的形式将源代码中的语句映射到树中的每一个节点上。")]),n._v(" "),e("p",[n._v("其实我们的 DOM 结构树，也是 AST 的一种，把 HTML DOM 语法解析并生成最终的页面。而模板引擎中常用的，则是将模板语法解析，分别生成 HTML DOM，使用像 HTML 拼接这样的方式（在对应的位置绑定变量、指令解析获取拼接逻辑等等），同时配合事件的管理、虚拟 DOM 的设计，可以最大化地提升页面的性能。")]),n._v(" "),e("p",[n._v("我们仔细看看这个过程是怎样的。")]),n._v(" "),e("h3",{attrs:{id:"_1-1-1-捕获特定语法"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_1-1-1-捕获特定语法"}},[n._v("#")]),n._v(" "),e("strong",[n._v("1.1.1 捕获特定语法")])]),n._v(" "),e("p",[n._v("生成 AST 的过程涉及到编译器的原理，一般经过以下过程（参考维基百科）：")]),n._v(" "),e("p",[n._v("(1) 语法分析。 语法分析的任务是在词法分析的基础上将单词序列组合成各类语法短语，如“程序”，“语句”，“表达式”等等。语法分析程序判断源程序在结构上是否正确，源程序的结构由上下文无关文法描述。例如 Vue 框架中，有"),e("code",[n._v("v-if")]),n._v("/"),e("code",[n._v("v-for")]),n._v("这样的指令，也有``这样的自定义 DOM 标签，还有"),e("code",[n._v("@click")]),n._v("/"),e("code",[n._v(":props")]),n._v("这样的简化绑定语法，模板引擎需要将它们一一解析出来，并相应地进行后续的处理。")]),n._v(" "),e("p",[n._v("(2) 语义分析。 语义分析是编译过程的一个逻辑阶段，语义分析的任务是对结构上正确的源程序进行上下文有关性质的审查，进行类型审查。语义分析是审查源程序有无语义错误，为代码生成阶段收集类型信息，一般类型检查也会在这个过程中进行。在 Vue 框架中，例如我们绑定了某个不存在的变量或者事件，又或者是使用了某个未定义的自定义组件等，都会在这个阶段进行报错提示。")]),n._v(" "),e("p",[n._v("(3) 生成 AST。 AST 的结构则根据使用者需要定义，1.1.2 节中生成的一些 AST 对象都是本人根据需要假设定义的，并不完全是 Vue 中最终的实现效果。")]),n._v(" "),e("p",[n._v("关于编译器的更详细的原理，大家感兴趣可以翻看其他大佬们的著作，例如很经典的编译原理。Vue 里到底是怎样处理的呢，语法分析、语义分析基本上是通过正则的方式来处理，生成 AST 的部分我们可以看一下简化后的源码，其实就是将解析出来的元素、指令、属性、父子节点关系等内容进行处理，得到一个 AST 对象：")]),n._v(" "),e("div",{staticClass:"language-text line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v('/**\n *  将HTML编译成AST对象\n */\nexport function parse(\n  template: string,\n  options: CompilerOptions\n): ASTElement | void {\n  // 返回AST对象\n  // 篇幅原因，一些前置定义省略\n  // 此处开始解析HTML模板\n  parseHTML(template, {\n    expectHTML: options.expectHTML,\n    isUnaryTag: options.isUnaryTag,\n    shouldDecodeNewlines: options.shouldDecodeNewlines,\n    start(tag, attrs, unary) {\n      // 一些前置检查和设置、兼容处理此处省略\n      // 此处定义了初始化的元素AST对象\n      const element: ASTElement = {\n        type: 1,\n        tag,\n        attrsList: attrs,\n        attrsMap: makeAttrsMap(attrs),\n        parent: currentParent,\n        children: []\n      };\n      // 检查元素标签是否合法（不是保留命名）\n      if (isForbiddenTag(element) &amp;&amp; !isServerRendering()) {\n        element.forbidden = true;\n        process.env.NODE_ENV !== "production" &amp;&amp;\n          warn(\n            "Templates should only be responsible for mapping the state to the " +\n              "UI. Avoid placing tags with side-effects in your templates, such as " +\n              `&lt;${tag}>` +\n              ", as they will not be parsed."\n          );\n      }\n      // 执行一些前置的元素预处理\n      for (let i = 0; i &lt; preTransforms.length; i++) {\n        preTransforms[i](element, options);\n      }\n      // 是否原生元素\n      if (inVPre) {\n        // 处理元素元素的一些属性\n        processRawAttrs(element);\n      } else {\n        // 处理指令，此处包括v-for/v-if/v-once/key等等\n        processFor(element);\n        processIf(element);\n        processOnce(element);\n        processKey(element); // 删除结构属性\n\n        // 确定这是否是一个简单的元素\n        element.plain = !element.key &amp;&amp; !attrs.length;\n\n        // 处理ref/slot/component等属性\n        processRef(element);\n        processSlot(element);\n        processComponent(element);\n        for (let i = 0; i &lt; transforms.length; i++) {\n          transforms[i](element, options);\n        }\n        processAttrs(element);\n      }\n\n      // 后面还有一些父子节点等处理，此处省略\n    }\n    // 其他省略\n  });\n  return root;\n}\n')])]),n._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[n._v("1")]),e("br"),e("span",{staticClass:"line-number"},[n._v("2")]),e("br"),e("span",{staticClass:"line-number"},[n._v("3")]),e("br"),e("span",{staticClass:"line-number"},[n._v("4")]),e("br"),e("span",{staticClass:"line-number"},[n._v("5")]),e("br"),e("span",{staticClass:"line-number"},[n._v("6")]),e("br"),e("span",{staticClass:"line-number"},[n._v("7")]),e("br"),e("span",{staticClass:"line-number"},[n._v("8")]),e("br"),e("span",{staticClass:"line-number"},[n._v("9")]),e("br"),e("span",{staticClass:"line-number"},[n._v("10")]),e("br"),e("span",{staticClass:"line-number"},[n._v("11")]),e("br"),e("span",{staticClass:"line-number"},[n._v("12")]),e("br"),e("span",{staticClass:"line-number"},[n._v("13")]),e("br"),e("span",{staticClass:"line-number"},[n._v("14")]),e("br"),e("span",{staticClass:"line-number"},[n._v("15")]),e("br"),e("span",{staticClass:"line-number"},[n._v("16")]),e("br"),e("span",{staticClass:"line-number"},[n._v("17")]),e("br"),e("span",{staticClass:"line-number"},[n._v("18")]),e("br"),e("span",{staticClass:"line-number"},[n._v("19")]),e("br"),e("span",{staticClass:"line-number"},[n._v("20")]),e("br"),e("span",{staticClass:"line-number"},[n._v("21")]),e("br"),e("span",{staticClass:"line-number"},[n._v("22")]),e("br"),e("span",{staticClass:"line-number"},[n._v("23")]),e("br"),e("span",{staticClass:"line-number"},[n._v("24")]),e("br"),e("span",{staticClass:"line-number"},[n._v("25")]),e("br"),e("span",{staticClass:"line-number"},[n._v("26")]),e("br"),e("span",{staticClass:"line-number"},[n._v("27")]),e("br"),e("span",{staticClass:"line-number"},[n._v("28")]),e("br"),e("span",{staticClass:"line-number"},[n._v("29")]),e("br"),e("span",{staticClass:"line-number"},[n._v("30")]),e("br"),e("span",{staticClass:"line-number"},[n._v("31")]),e("br"),e("span",{staticClass:"line-number"},[n._v("32")]),e("br"),e("span",{staticClass:"line-number"},[n._v("33")]),e("br"),e("span",{staticClass:"line-number"},[n._v("34")]),e("br"),e("span",{staticClass:"line-number"},[n._v("35")]),e("br"),e("span",{staticClass:"line-number"},[n._v("36")]),e("br"),e("span",{staticClass:"line-number"},[n._v("37")]),e("br"),e("span",{staticClass:"line-number"},[n._v("38")]),e("br"),e("span",{staticClass:"line-number"},[n._v("39")]),e("br"),e("span",{staticClass:"line-number"},[n._v("40")]),e("br"),e("span",{staticClass:"line-number"},[n._v("41")]),e("br"),e("span",{staticClass:"line-number"},[n._v("42")]),e("br"),e("span",{staticClass:"line-number"},[n._v("43")]),e("br"),e("span",{staticClass:"line-number"},[n._v("44")]),e("br"),e("span",{staticClass:"line-number"},[n._v("45")]),e("br"),e("span",{staticClass:"line-number"},[n._v("46")]),e("br"),e("span",{staticClass:"line-number"},[n._v("47")]),e("br"),e("span",{staticClass:"line-number"},[n._v("48")]),e("br"),e("span",{staticClass:"line-number"},[n._v("49")]),e("br"),e("span",{staticClass:"line-number"},[n._v("50")]),e("br"),e("span",{staticClass:"line-number"},[n._v("51")]),e("br"),e("span",{staticClass:"line-number"},[n._v("52")]),e("br"),e("span",{staticClass:"line-number"},[n._v("53")]),e("br"),e("span",{staticClass:"line-number"},[n._v("54")]),e("br"),e("span",{staticClass:"line-number"},[n._v("55")]),e("br"),e("span",{staticClass:"line-number"},[n._v("56")]),e("br"),e("span",{staticClass:"line-number"},[n._v("57")]),e("br"),e("span",{staticClass:"line-number"},[n._v("58")]),e("br"),e("span",{staticClass:"line-number"},[n._v("59")]),e("br"),e("span",{staticClass:"line-number"},[n._v("60")]),e("br"),e("span",{staticClass:"line-number"},[n._v("61")]),e("br"),e("span",{staticClass:"line-number"},[n._v("62")]),e("br"),e("span",{staticClass:"line-number"},[n._v("63")]),e("br"),e("span",{staticClass:"line-number"},[n._v("64")]),e("br"),e("span",{staticClass:"line-number"},[n._v("65")]),e("br"),e("span",{staticClass:"line-number"},[n._v("66")]),e("br"),e("span",{staticClass:"line-number"},[n._v("67")]),e("br"),e("span",{staticClass:"line-number"},[n._v("68")]),e("br"),e("span",{staticClass:"line-number"},[n._v("69")]),e("br"),e("span",{staticClass:"line-number"},[n._v("70")]),e("br")])]),e("h3",{attrs:{id:"_1-1-2-dom-元素捕获"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_1-1-2-dom-元素捕获"}},[n._v("#")]),n._v(" "),e("strong",[n._v("1.1.2 DOM 元素捕获")])]),n._v(" "),e("p",[n._v("最简单的，我们来捕获一个"),e("code",[n._v("元素，然后生成一个")]),n._v("元素。例如开发者写了以下这么一段模板，我们可以对它们进行捕获：")]),n._v(" "),e("div",{staticClass:"language-text line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v("&lt;div>\n  &lt;a>123&lt;/a>\n  &lt;p>456&lt;span>789&lt;/span>&lt;/p>\n&lt;/div>\n")])]),n._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[n._v("1")]),e("br"),e("span",{staticClass:"line-number"},[n._v("2")]),e("br"),e("span",{staticClass:"line-number"},[n._v("3")]),e("br"),e("span",{staticClass:"line-number"},[n._v("4")]),e("br")])]),e("p",[n._v("捕获后我们或许可以得到这样的一个对象：")]),n._v(" "),e("div",{staticClass:"language-text line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v('thisDiv = {\n  dom: {\n    type: "dom",\n    ele: "div",\n    nodeIndex: 0,\n    children: [\n      {\n        type: "dom",\n        ele: "a",\n        nodeIndex: 1,\n        children: [{ type: "text", value: "123" }]\n      },\n      {\n        type: "dom",\n        ele: "p",\n        nodeIndex: 2,\n        children: [\n          {\n            type: "dom",\n            ele: "span",\n            nodeIndex: 3,\n            children: [{ type: "text", value: "456" }]\n          },\n          { type: "text", value: "789" }\n        ]\n      }\n    ]\n  }\n};\n')])]),n._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[n._v("1")]),e("br"),e("span",{staticClass:"line-number"},[n._v("2")]),e("br"),e("span",{staticClass:"line-number"},[n._v("3")]),e("br"),e("span",{staticClass:"line-number"},[n._v("4")]),e("br"),e("span",{staticClass:"line-number"},[n._v("5")]),e("br"),e("span",{staticClass:"line-number"},[n._v("6")]),e("br"),e("span",{staticClass:"line-number"},[n._v("7")]),e("br"),e("span",{staticClass:"line-number"},[n._v("8")]),e("br"),e("span",{staticClass:"line-number"},[n._v("9")]),e("br"),e("span",{staticClass:"line-number"},[n._v("10")]),e("br"),e("span",{staticClass:"line-number"},[n._v("11")]),e("br"),e("span",{staticClass:"line-number"},[n._v("12")]),e("br"),e("span",{staticClass:"line-number"},[n._v("13")]),e("br"),e("span",{staticClass:"line-number"},[n._v("14")]),e("br"),e("span",{staticClass:"line-number"},[n._v("15")]),e("br"),e("span",{staticClass:"line-number"},[n._v("16")]),e("br"),e("span",{staticClass:"line-number"},[n._v("17")]),e("br"),e("span",{staticClass:"line-number"},[n._v("18")]),e("br"),e("span",{staticClass:"line-number"},[n._v("19")]),e("br"),e("span",{staticClass:"line-number"},[n._v("20")]),e("br"),e("span",{staticClass:"line-number"},[n._v("21")]),e("br"),e("span",{staticClass:"line-number"},[n._v("22")]),e("br"),e("span",{staticClass:"line-number"},[n._v("23")]),e("br"),e("span",{staticClass:"line-number"},[n._v("24")]),e("br"),e("span",{staticClass:"line-number"},[n._v("25")]),e("br"),e("span",{staticClass:"line-number"},[n._v("26")]),e("br"),e("span",{staticClass:"line-number"},[n._v("27")]),e("br"),e("span",{staticClass:"line-number"},[n._v("28")]),e("br"),e("span",{staticClass:"line-number"},[n._v("29")]),e("br")])]),e("p",[n._v("这个对象维护我们需要的一些信息，某个 HTML 元素里需要绑定哪些变量（变量更新的时候需要更新该节点内容），以怎样的方式来拼接（是否有逻辑指令，如"),e("code",[n._v("v-if")]),n._v("、"),e("code",[n._v("v-for")]),n._v("等），哪些节点绑定了怎样的事件监听事件（是否匹配一些常用的事件能力支持），所以这里 AST 能做的事情是很多了。")]),n._v(" "),e("p",[n._v("我们最终还是会根据 AST 对象生成真实的页面片段和逻辑，实现过程其实也是将很多的特殊标识（例如元素 ID、属性标记等）打到该元素上，同时配合一些 Javascript 的元素选择方式、事件监听方式等，来将这个元素动态化（支持内容更新、节点更新）而实现最终的页面效果。Vue 会根据 AST 对象生成一段可执行的代码，我们看看这部分的实现：")]),n._v(" "),e("div",{staticClass:"language-text line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v('// 生成一个元素\nfunction genElement(el: ASTElement): string {\n  // 根据该元素是否有相关的指令、属性语法对象，来进行对应的代码生成\n  if (el.staticRoot &amp;&amp; !el.staticProcessed) {\n    return genStatic(el);\n  } else if (el.once &amp;&amp; !el.onceProcessed) {\n    return genOnce(el);\n  } else if (el.for &amp;&amp; !el.forProcessed) {\n    return genFor(el);\n  } else if (el.if &amp;&amp; !el.ifProcessed) {\n    return genIf(el);\n  } else if (el.tag === "template" &amp;&amp; !el.slotTarget) {\n    return genChildren(el) || "void 0";\n  } else if (el.tag === "slot") {\n    return genSlot(el);\n  } else {\n    // component或者element的代码生成\n    let code;\n    if (el.component) {\n      code = genComponent(el.component, el);\n    } else {\n      const data = el.plain ? undefined : genData(el);\n\n      const children = el.inlineTemplate ? null : genChildren(el, true);\n      code = `_c(\'${el.tag}\'${\n        data ? `,${data}` : "" // data\n      }${\n        children ? `,${children}` : "" // children\n      })`;\n    }\n    // 模块转换\n    for (let i = 0; i &lt; transforms.length; i++) {\n      code = transforms[i](el, code);\n    }\n    // 返回最后拼装好的可执行的代码\n    return code;\n  }\n}\n')])]),n._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[n._v("1")]),e("br"),e("span",{staticClass:"line-number"},[n._v("2")]),e("br"),e("span",{staticClass:"line-number"},[n._v("3")]),e("br"),e("span",{staticClass:"line-number"},[n._v("4")]),e("br"),e("span",{staticClass:"line-number"},[n._v("5")]),e("br"),e("span",{staticClass:"line-number"},[n._v("6")]),e("br"),e("span",{staticClass:"line-number"},[n._v("7")]),e("br"),e("span",{staticClass:"line-number"},[n._v("8")]),e("br"),e("span",{staticClass:"line-number"},[n._v("9")]),e("br"),e("span",{staticClass:"line-number"},[n._v("10")]),e("br"),e("span",{staticClass:"line-number"},[n._v("11")]),e("br"),e("span",{staticClass:"line-number"},[n._v("12")]),e("br"),e("span",{staticClass:"line-number"},[n._v("13")]),e("br"),e("span",{staticClass:"line-number"},[n._v("14")]),e("br"),e("span",{staticClass:"line-number"},[n._v("15")]),e("br"),e("span",{staticClass:"line-number"},[n._v("16")]),e("br"),e("span",{staticClass:"line-number"},[n._v("17")]),e("br"),e("span",{staticClass:"line-number"},[n._v("18")]),e("br"),e("span",{staticClass:"line-number"},[n._v("19")]),e("br"),e("span",{staticClass:"line-number"},[n._v("20")]),e("br"),e("span",{staticClass:"line-number"},[n._v("21")]),e("br"),e("span",{staticClass:"line-number"},[n._v("22")]),e("br"),e("span",{staticClass:"line-number"},[n._v("23")]),e("br"),e("span",{staticClass:"line-number"},[n._v("24")]),e("br"),e("span",{staticClass:"line-number"},[n._v("25")]),e("br"),e("span",{staticClass:"line-number"},[n._v("26")]),e("br"),e("span",{staticClass:"line-number"},[n._v("27")]),e("br"),e("span",{staticClass:"line-number"},[n._v("28")]),e("br"),e("span",{staticClass:"line-number"},[n._v("29")]),e("br"),e("span",{staticClass:"line-number"},[n._v("30")]),e("br"),e("span",{staticClass:"line-number"},[n._v("31")]),e("br"),e("span",{staticClass:"line-number"},[n._v("32")]),e("br"),e("span",{staticClass:"line-number"},[n._v("33")]),e("br"),e("span",{staticClass:"line-number"},[n._v("34")]),e("br"),e("span",{staticClass:"line-number"},[n._v("35")]),e("br"),e("span",{staticClass:"line-number"},[n._v("36")]),e("br"),e("span",{staticClass:"line-number"},[n._v("37")]),e("br"),e("span",{staticClass:"line-number"},[n._v("38")]),e("br")])]),e("h3",{attrs:{id:"_1-1-3-模板引擎赋能"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_1-1-3-模板引擎赋能"}},[n._v("#")]),n._v(" "),e("strong",[n._v("1.1.3 模板引擎赋能")])]),n._v(" "),e("p",[n._v("原本就是一个"),e("code",[n._v("，经过 AST 生成一个对象，最终还是生成一个")]),n._v("，这是多余的步骤吗？不是的，在这个过程中我们可以实现一些功能： (1) 排除无效 DOM 元素，并在构建过程可进行报错。 (2) 使用自定义组件的时候，可匹配出来。 (3) 可方便地实现数据绑定、事件绑定等功能。 (4) 为虚拟 DOM Diff 过程打下铺垫。 (5) HTML 转义（预防 XSS 漏洞）。")]),n._v(" "),e("p",[n._v("通过通用的模板引擎，我们能处理掉很多低效又重复的工作，例如浏览器兼容、全局事件的统一管理和维护、模板更新的虚拟 DOM 机制、树状组织管理组件，而留给开发者的事情就可以少之又少。现在我们知道了模板引擎都做了什么事情，就可以区分开 Vue 框架提供的能力和我们需要自行处理的逻辑，可以更专注于业务开发。")]),n._v(" "),e("p",[n._v("我们来看看虚拟 DOM 的机制。")]),n._v(" "),e("h2",{attrs:{id:"_1-2-虚拟-dom"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_1-2-虚拟-dom"}},[n._v("#")]),n._v(" "),e("strong",[n._v("1.2 虚拟 DOM")])]),n._v(" "),e("p",[n._v("虚拟 DOM 如今都被作为前端面试基础题库之一了，多多少少面试者都要去了解下，当初 React 就是因为虚拟 DOM 的提出，暂时赢下了浏览器性能之争（尤其在 AngularJS 的脏检查机制对比下）。当然，这都是几年前的事情了，如今几大框架的性能问题，早也不是什么大问题了。")]),n._v(" "),e("p",[n._v("虚拟 DOM 大概可分成三个过程： (1) 用 JS 对象模拟 DOM 树，得到一棵虚拟 DOM 树。 (2) 当页面数据变更时，生成新的虚拟 DOM 树，比较新旧两棵虚拟 DOM 树的差异。 (3) 把差异应用到真正的 DOM 树上。")]),n._v(" "),e("h3",{attrs:{id:"_1-2-1-用-js-对象模拟-dom-树"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_1-2-1-用-js-对象模拟-dom-树"}},[n._v("#")]),n._v(" "),e("strong",[n._v("1.2.1 用 JS 对象模拟 DOM 树")])]),n._v(" "),e("p",[n._v("为什么要用到虚拟 DOM 呢？不知道大家仔细研究过 DOM 节点对象没，一个真正的 DOM 元素非常庞大，拥有很多的属性值。因为一个 DOM 节点它包括了太多太多的属性、元素和事件对象，实际上我们并不是全部都会用到，通常包括节点内容、元素位置、样式、节点的添加删除等方法。所以，我们通过用 JS 对象表示 DOM 元素的方式，可以大大降低了比较差异的计算量。")]),n._v(" "),e("p",[n._v("看一下 Vue 源码，我们会发现 VNode 只有这些属性：")]),n._v(" "),e("div",{staticClass:"language-text line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v("tag: string | void;\ndata: VNodeData | void;\nchildren: ?Array&lt;VNode>;\ntext: string | void;\nelm: Node | void;\nns: string | void;\ncontext: Component | void; // rendered in this component's scope\nkey: string | number | void;\ncomponentOptions: VNodeComponentOptions | void;\ncomponentInstance: Component | void; // component instance\nparent: VNode | void; // component placeholder node\n// strictly internal\nraw: boolean; // contains raw HTML? (server only)\nisStatic: boolean; // hoisted static node\nisRootInsert: boolean; // necessary for enter transition check\nisComment: boolean; // empty comment placeholder?\nisCloned: boolean; // is a cloned node?\nisOnce: boolean; // is a v-once node?\nasyncFactory: Function | void; // async component factory function\nasyncMeta: Object | void;\nisAsyncPlaceholder: boolean;\nssrContext: Object | void;\nfnContext: Component | void; // real context vm for functional nodes\nfnOptions: ?ComponentOptions; // for SSR caching\ndevtoolsMeta: ?Object; // used to store functional render context fordevtools\nfnScopeId: ?string; // functional scope id support\n")])]),n._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[n._v("1")]),e("br"),e("span",{staticClass:"line-number"},[n._v("2")]),e("br"),e("span",{staticClass:"line-number"},[n._v("3")]),e("br"),e("span",{staticClass:"line-number"},[n._v("4")]),e("br"),e("span",{staticClass:"line-number"},[n._v("5")]),e("br"),e("span",{staticClass:"line-number"},[n._v("6")]),e("br"),e("span",{staticClass:"line-number"},[n._v("7")]),e("br"),e("span",{staticClass:"line-number"},[n._v("8")]),e("br"),e("span",{staticClass:"line-number"},[n._v("9")]),e("br"),e("span",{staticClass:"line-number"},[n._v("10")]),e("br"),e("span",{staticClass:"line-number"},[n._v("11")]),e("br"),e("span",{staticClass:"line-number"},[n._v("12")]),e("br"),e("span",{staticClass:"line-number"},[n._v("13")]),e("br"),e("span",{staticClass:"line-number"},[n._v("14")]),e("br"),e("span",{staticClass:"line-number"},[n._v("15")]),e("br"),e("span",{staticClass:"line-number"},[n._v("16")]),e("br"),e("span",{staticClass:"line-number"},[n._v("17")]),e("br"),e("span",{staticClass:"line-number"},[n._v("18")]),e("br"),e("span",{staticClass:"line-number"},[n._v("19")]),e("br"),e("span",{staticClass:"line-number"},[n._v("20")]),e("br"),e("span",{staticClass:"line-number"},[n._v("21")]),e("br"),e("span",{staticClass:"line-number"},[n._v("22")]),e("br"),e("span",{staticClass:"line-number"},[n._v("23")]),e("br"),e("span",{staticClass:"line-number"},[n._v("24")]),e("br"),e("span",{staticClass:"line-number"},[n._v("25")]),e("br"),e("span",{staticClass:"line-number"},[n._v("26")]),e("br")])]),e("h3",{attrs:{id:"_1-2-2-比较新旧两棵虚拟-dom-树的差异"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_1-2-2-比较新旧两棵虚拟-dom-树的差异"}},[n._v("#")]),n._v(" "),e("strong",[n._v("1.2.2 比较新旧两棵虚拟 DOM 树的差异")])]),n._v(" "),e("p",[n._v("虚拟 DOM 中，差异对比也是很关键的一步，这里简单说一下。当状态变更的时候，重新构造一棵新的对象树。然后用新的树和旧的树进行比较，记录两棵树差异。通常来说这样的差异需要记录：")]),n._v(" "),e("ul",[e("li",[n._v("需要替换掉原来的节点")]),n._v(" "),e("li",[n._v("移动、删除、新增子节点")]),n._v(" "),e("li",[n._v("修改了节点的属性")]),n._v(" "),e("li",[n._v("对于文本节点的文本内容改变")])]),n._v(" "),e("p",[e("img",{attrs:{src:"C:%5CUsers%5C86131%5CDesktop%5C%E7%AC%94%E8%AE%B0%5Cimage%5Cv2-34e860f20feadcc6d94440801b742672_720w.png",alt:"img"}})]),n._v(" "),e("p",[n._v("如图 1-1，这里我们对比两棵 DOM 树，得到的差异有：p 元素插入了一个 span 元素子节点，然后原先的文本节点挪到了 span 元素子节点下面。最后通过 JS 操作就可以实现完，具体实现的步骤则是第三步：")]),n._v(" "),e("h3",{attrs:{id:"_1-2-3-把差异应用到真正的-dom-树上"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_1-2-3-把差异应用到真正的-dom-树上"}},[n._v("#")]),n._v(" "),e("strong",[n._v("1.2.3 把差异应用到真正的 DOM 树上")])]),n._v(" "),e("p",[n._v("经过差异对比之后，我们能获得一组差异记录，接下里我们需要使用它。差异记录要应用到真正的 DOM 树上，需要进行一些操作，例如节点的替换、移动、删除，文本内容的改变等。")]),n._v(" "),e("p",[n._v("我们来看一下，在 Vue 中是怎么进行 DOM Diff 的，虽然代码里很多函数没贴出来，但其实看函数名也可以大概理解都是什么作用，例如"),e("code",[n._v("updateChildren")]),n._v("、"),e("code",[n._v("addVnodes")]),n._v("、"),e("code",[n._v("removeVnodes")]),n._v("、"),e("code",[n._v("setTextContent")]),n._v("等，大致是个对比差异然后更新的操作：")]),n._v(" "),e("div",{staticClass:"language-text line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v('// 简单看这段代码感受下\n// 对比差异然后更新\nconst oldCh = oldVnode.children;\nconst ch = vnode.children;\nif (isDef(data) &amp;&amp; isPatchable(vnode)) {\n  for (i = 0; i &lt; cbs.update.length; ++i) cbs.update[i](oldVnode, vnode);\n  if (isDef((i = data.hook)) &amp;&amp; isDef((i = i.update))) i(oldVnode, vnode);\n}\nif (isUndef(vnode.text)) {\n  if (isDef(oldCh) &amp;&amp; isDef(ch)) {\n    if (oldCh !== ch)\n      updateChildren(elm, oldCh, ch, insertedVnodeQueue, removeOnly);\n  } else if (isDef(ch)) {\n    if (process.env.NODE_ENV !== "production") {\n      checkDuplicateKeys(ch);\n    }\n    if (isDef(oldVnode.text)) nodeOps.setTextContent(elm, "");\n    addVnodes(elm, null, ch, 0, ch.length - 1, insertedVnodeQueue);\n  } else if (isDef(oldCh)) {\n    removeVnodes(elm, oldCh, 0, oldCh.length - 1);\n  } else if (isDef(oldVnode.text)) {\n    nodeOps.setTextContent(elm, "");\n  }\n} else if (oldVnode.text !== vnode.text) {\n  nodeOps.setTextContent(elm, vnode.text);\n}\nif (isDef(data)) {\n  if (isDef((i = data.hook)) &amp;&amp; isDef((i = i.postpatch))) i(oldVnode, vnode);\n}\n')])]),n._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[n._v("1")]),e("br"),e("span",{staticClass:"line-number"},[n._v("2")]),e("br"),e("span",{staticClass:"line-number"},[n._v("3")]),e("br"),e("span",{staticClass:"line-number"},[n._v("4")]),e("br"),e("span",{staticClass:"line-number"},[n._v("5")]),e("br"),e("span",{staticClass:"line-number"},[n._v("6")]),e("br"),e("span",{staticClass:"line-number"},[n._v("7")]),e("br"),e("span",{staticClass:"line-number"},[n._v("8")]),e("br"),e("span",{staticClass:"line-number"},[n._v("9")]),e("br"),e("span",{staticClass:"line-number"},[n._v("10")]),e("br"),e("span",{staticClass:"line-number"},[n._v("11")]),e("br"),e("span",{staticClass:"line-number"},[n._v("12")]),e("br"),e("span",{staticClass:"line-number"},[n._v("13")]),e("br"),e("span",{staticClass:"line-number"},[n._v("14")]),e("br"),e("span",{staticClass:"line-number"},[n._v("15")]),e("br"),e("span",{staticClass:"line-number"},[n._v("16")]),e("br"),e("span",{staticClass:"line-number"},[n._v("17")]),e("br"),e("span",{staticClass:"line-number"},[n._v("18")]),e("br"),e("span",{staticClass:"line-number"},[n._v("19")]),e("br"),e("span",{staticClass:"line-number"},[n._v("20")]),e("br"),e("span",{staticClass:"line-number"},[n._v("21")]),e("br"),e("span",{staticClass:"line-number"},[n._v("22")]),e("br"),e("span",{staticClass:"line-number"},[n._v("23")]),e("br"),e("span",{staticClass:"line-number"},[n._v("24")]),e("br"),e("span",{staticClass:"line-number"},[n._v("25")]),e("br"),e("span",{staticClass:"line-number"},[n._v("26")]),e("br"),e("span",{staticClass:"line-number"},[n._v("27")]),e("br"),e("span",{staticClass:"line-number"},[n._v("28")]),e("br"),e("span",{staticClass:"line-number"},[n._v("29")]),e("br")])]),e("p",[n._v("前言中我们提到，页面的更新有两种方式：字符串模板和节点模板。而字符串模板"),e("code",[n._v("innerHTML")]),n._v("的方式会消耗比较多的计算，节点模板的方式又需要管理特别多的节点信息和引用保存，使用虚拟 DOM 则可以有效地降低浏览器计算和性能。")]),n._v(" "),e("h2",{attrs:{id:"_1-3-数据绑定"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_1-3-数据绑定"}},[n._v("#")]),n._v(" "),e("strong",[n._v("1.3 数据绑定")])]),n._v(" "),e("p",[n._v("在 Vue 中，最基础的模板语法是数据绑定，例如：")]),n._v(" "),e("div",{staticClass:"language-text line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v("&lt;div>{{ message }}&lt;/div>\n")])]),n._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[n._v("1")]),e("br")])]),e("p",[n._v("这里使用插值表达式"),e("code",[n._v("{{}}")]),n._v("绑定了一个"),e("code",[n._v("message")]),n._v("的变量，开发者在 Vue 实例"),e("code",[n._v("data")]),n._v("中绑定该变量：")]),n._v(" "),e("div",{staticClass:"language-text line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v('new Vue({\n  data: {\n    message: "测试文本"\n  }\n});\n')])]),n._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[n._v("1")]),e("br"),e("span",{staticClass:"line-number"},[n._v("2")]),e("br"),e("span",{staticClass:"line-number"},[n._v("3")]),e("br"),e("span",{staticClass:"line-number"},[n._v("4")]),e("br"),e("span",{staticClass:"line-number"},[n._v("5")]),e("br")])]),e("p",[n._v("最终页面展示内容为"),e("code",[n._v("测试文本")]),n._v("。这是怎么做到的呢？")]),n._v(" "),e("h3",{attrs:{id:"_1-3-1-数据绑定的实现"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_1-3-1-数据绑定的实现"}},[n._v("#")]),n._v(" "),e("strong",[n._v("1.3.1 数据绑定的实现")])]),n._v(" "),e("p",[n._v("这种使用双大括号来绑定变量的方式，我们称之为数据绑定。它是怎么实现的呢，前面也有大致提到，数据绑定的过程其实不复杂： (1) 解析语法生成 AST。 (2) 根据 AST 结果生成 DOM。 (3) 将数据绑定更新至模板。")]),n._v(" "),e("p",[n._v("上述这个过程，是 Vue 中模板引擎在做的事情。我们来看看上面在 Vue 里的代码片段``，我们可以通过 DOM 元素捕获，解析后获得这样一个 AST 对象：")]),n._v(" "),e("div",{staticClass:"language-text line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v('thisDiv = {\n  dom: {\n    type: "dom",\n    ele: "div",\n    nodeIndex: 0,\n    children: [{ type: "text", value: "" }]\n  },\n  binding: [{ type: "dom", nodeIndex: 0, valueName: "message" }]\n};\n')])]),n._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[n._v("1")]),e("br"),e("span",{staticClass:"line-number"},[n._v("2")]),e("br"),e("span",{staticClass:"line-number"},[n._v("3")]),e("br"),e("span",{staticClass:"line-number"},[n._v("4")]),e("br"),e("span",{staticClass:"line-number"},[n._v("5")]),e("br"),e("span",{staticClass:"line-number"},[n._v("6")]),e("br"),e("span",{staticClass:"line-number"},[n._v("7")]),e("br"),e("span",{staticClass:"line-number"},[n._v("8")]),e("br"),e("span",{staticClass:"line-number"},[n._v("9")]),e("br")])]),e("p",[n._v("这样，我们在生成一个 DOM 的时候，同时添加对"),e("code",[n._v("message")]),n._v("的监听，数据更新时我们会找到对应的"),e("code",[n._v("nodeIndex")]),n._v("，更新值：")]),n._v(" "),e("div",{staticClass:"language-text line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v('// 假设这是一个生成 DOM 的过程，包括 innerHTML 和事件监听\nfunction generateDOM(astObject) {\n  const { dom, binding = [] } = astObject;\n  // 生成DOM，这里假装当前节点是baseDom\n  baseDom.innerHTML = getDOMString(dom);\n  // 对于数据绑定的，来进行监听更新吧\n  baseDom.addEventListener("data:change", (name, value) => {\n    // 寻找匹配的数据绑定\n    const obj = binding.find(x => x.valueName == name);\n    // 若找到值绑定的对应节点，则更新其值。\n    if (obj) {\n      baseDom.find(`[data-node-index="${obj.nodeIndex}"]`).innerHTML = value;\n    }\n  });\n}\n\n// 获取DOM字符串，这里简单拼成字符串\nfunction getDOMString(domObj) {\n  // 无效对象返回\'\'\n  if (!domObj) return "";\n  const { type, children = [], nodeIndex, ele, value } = domObj;\n  if (type == "dom") {\n    // 若有子对象，递归返回生成的字符串拼接\n    const childString = "";\n    children.forEach(x => {\n      childString += getDOMString(x);\n    });\n    // dom对象，拼接生成对象字符串\n    return `&lt;${ele} data-node-index="${nodeIndex}">${childString}&lt;/${ele}>`;\n  } else if (type == "text") {\n    // 若为textNode，返回text的值\n    return value;\n  }\n}\n')])]),n._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[n._v("1")]),e("br"),e("span",{staticClass:"line-number"},[n._v("2")]),e("br"),e("span",{staticClass:"line-number"},[n._v("3")]),e("br"),e("span",{staticClass:"line-number"},[n._v("4")]),e("br"),e("span",{staticClass:"line-number"},[n._v("5")]),e("br"),e("span",{staticClass:"line-number"},[n._v("6")]),e("br"),e("span",{staticClass:"line-number"},[n._v("7")]),e("br"),e("span",{staticClass:"line-number"},[n._v("8")]),e("br"),e("span",{staticClass:"line-number"},[n._v("9")]),e("br"),e("span",{staticClass:"line-number"},[n._v("10")]),e("br"),e("span",{staticClass:"line-number"},[n._v("11")]),e("br"),e("span",{staticClass:"line-number"},[n._v("12")]),e("br"),e("span",{staticClass:"line-number"},[n._v("13")]),e("br"),e("span",{staticClass:"line-number"},[n._v("14")]),e("br"),e("span",{staticClass:"line-number"},[n._v("15")]),e("br"),e("span",{staticClass:"line-number"},[n._v("16")]),e("br"),e("span",{staticClass:"line-number"},[n._v("17")]),e("br"),e("span",{staticClass:"line-number"},[n._v("18")]),e("br"),e("span",{staticClass:"line-number"},[n._v("19")]),e("br"),e("span",{staticClass:"line-number"},[n._v("20")]),e("br"),e("span",{staticClass:"line-number"},[n._v("21")]),e("br"),e("span",{staticClass:"line-number"},[n._v("22")]),e("br"),e("span",{staticClass:"line-number"},[n._v("23")]),e("br"),e("span",{staticClass:"line-number"},[n._v("24")]),e("br"),e("span",{staticClass:"line-number"},[n._v("25")]),e("br"),e("span",{staticClass:"line-number"},[n._v("26")]),e("br"),e("span",{staticClass:"line-number"},[n._v("27")]),e("br"),e("span",{staticClass:"line-number"},[n._v("28")]),e("br"),e("span",{staticClass:"line-number"},[n._v("29")]),e("br"),e("span",{staticClass:"line-number"},[n._v("30")]),e("br"),e("span",{staticClass:"line-number"},[n._v("31")]),e("br"),e("span",{staticClass:"line-number"},[n._v("32")]),e("br"),e("span",{staticClass:"line-number"},[n._v("33")]),e("br"),e("span",{staticClass:"line-number"},[n._v("34")]),e("br")])]),e("p",[n._v("这样，我们就能在"),e("code",[n._v("message")]),n._v("变量更新的时候，通过该变量关联的引用，来自动更新对应展示的内容。而要知道"),e("code",[n._v("message")]),n._v("变量什么时候进行了改变，我们需要对数据进行监听。")]),n._v(" "),e("h3",{attrs:{id:"_1-3-2-数据更新监听"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_1-3-2-数据更新监听"}},[n._v("#")]),n._v(" "),e("strong",[n._v("1.3.2 数据更新监听")])]),n._v(" "),e("p",[n._v("我们能看到，上面的简单代码描述过程中，使用的数据监听方法是用了"),e("code",[n._v('addEventListener("data:change", Function)')]),n._v("的方式。其实每个框架都会有自己的方式，例如 Angular 使用的则是大家都熟知的脏检查。")]),n._v(" "),e("p",[e("strong",[n._v("(1) Angular: watch 机制。")]),n._v(" 脏检查是什么呢？在 AngularJS 中，并不直接监听数据的变动，而是监听常见的事件如用户交互（点击、输入等）、定时器、生命周期等。在每次事件触发完毕后，计算数据的新值和旧值是否有差异，若有差异则更新页面，并触发下一次的脏检查，直到没有差异或是次数达到设定阈值。很显然，这样每一次脏检查可能会形成环状，导致死循环。虽然 AngularJS 有阈值控制，但也无法避免这种机制所导致的低效甚至性能问题。")]),n._v(" "),e("p",[n._v("由于设计上存在的这些问题一直被大家诟病，在 Angular2 中应用的组织类似 DOM，也是树结构的，脏检查会从根组件开始，自上而下对树上的所有子组件进行检查。相比 AngularJS 中的带有环的结构，这样的单向数据流效率更高，而且容易预测，性能上也有不少的提升。")]),n._v(" "),e("p",[e("strong",[n._v("(2) React: 手动 set 写入。")]),n._v(" 在 React 里，是需要手动调用"),e("code",[n._v("set()")]),n._v("的方式写入数据来更新模版。")]),n._v(" "),e("p",[e("strong",[n._v("(3) Vue: Getter/Setter。")]),n._v(" 而在 Vue 中，主要是依赖了"),e("code",[n._v("Getter/Setter")]),n._v(":")]),n._v(" "),e("div",{staticClass:"language-text line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v('Object.defineProperty(obj, key, {\n  enumerable: true,\n  configurable: true,\n  // getter\n  get: function reactiveGetter() {\n    const value = getter ? getter.call(obj) : val;\n    if (Dep.target) {\n      dep.depend();\n      if (childOb) {\n        childOb.dep.depend();\n        if (Array.isArray(value)) {\n          dependArray(value);\n        }\n      }\n    }\n    return value;\n  },\n  // setter，最终更新后会通知噢\n  set: function reactiveSetter(newVal) {\n    const value = getter ? getter.call(obj) : val;\n    if (newVal === value || (newVal !== newVal &amp;&amp; value !== value)) {\n      return;\n    }\n    if (process.env.NODE_ENV !== "production" &amp;&amp; customSetter) {\n      customSetter();\n    }\n    if (getter &amp;&amp; !setter) return;\n    if (setter) {\n      setter.call(obj, newVal);\n    } else {\n      val = newVal;\n    }\n    childOb = !shallow &amp;&amp; observe(newVal);\n    dep.notify();\n  }\n});\n')])]),n._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[n._v("1")]),e("br"),e("span",{staticClass:"line-number"},[n._v("2")]),e("br"),e("span",{staticClass:"line-number"},[n._v("3")]),e("br"),e("span",{staticClass:"line-number"},[n._v("4")]),e("br"),e("span",{staticClass:"line-number"},[n._v("5")]),e("br"),e("span",{staticClass:"line-number"},[n._v("6")]),e("br"),e("span",{staticClass:"line-number"},[n._v("7")]),e("br"),e("span",{staticClass:"line-number"},[n._v("8")]),e("br"),e("span",{staticClass:"line-number"},[n._v("9")]),e("br"),e("span",{staticClass:"line-number"},[n._v("10")]),e("br"),e("span",{staticClass:"line-number"},[n._v("11")]),e("br"),e("span",{staticClass:"line-number"},[n._v("12")]),e("br"),e("span",{staticClass:"line-number"},[n._v("13")]),e("br"),e("span",{staticClass:"line-number"},[n._v("14")]),e("br"),e("span",{staticClass:"line-number"},[n._v("15")]),e("br"),e("span",{staticClass:"line-number"},[n._v("16")]),e("br"),e("span",{staticClass:"line-number"},[n._v("17")]),e("br"),e("span",{staticClass:"line-number"},[n._v("18")]),e("br"),e("span",{staticClass:"line-number"},[n._v("19")]),e("br"),e("span",{staticClass:"line-number"},[n._v("20")]),e("br"),e("span",{staticClass:"line-number"},[n._v("21")]),e("br"),e("span",{staticClass:"line-number"},[n._v("22")]),e("br"),e("span",{staticClass:"line-number"},[n._v("23")]),e("br"),e("span",{staticClass:"line-number"},[n._v("24")]),e("br"),e("span",{staticClass:"line-number"},[n._v("25")]),e("br"),e("span",{staticClass:"line-number"},[n._v("26")]),e("br"),e("span",{staticClass:"line-number"},[n._v("27")]),e("br"),e("span",{staticClass:"line-number"},[n._v("28")]),e("br"),e("span",{staticClass:"line-number"},[n._v("29")]),e("br"),e("span",{staticClass:"line-number"},[n._v("30")]),e("br"),e("span",{staticClass:"line-number"},[n._v("31")]),e("br"),e("span",{staticClass:"line-number"},[n._v("32")]),e("br"),e("span",{staticClass:"line-number"},[n._v("33")]),e("br"),e("span",{staticClass:"line-number"},[n._v("34")]),e("br"),e("span",{staticClass:"line-number"},[n._v("35")]),e("br"),e("span",{staticClass:"line-number"},[n._v("36")]),e("br")])]),e("p",[n._v("在数据更新的时候就执行了模板更新、watch、computed 等一些工作，而 Vue3.0 将使用"),e("code",[n._v("Proxy")]),n._v("的方式来进行，可参考**"),e("a",{attrs:{href:"https://link.zhihu.com/?target=https%3A//godbasin.github.io/vue-ebook/vue-ebook/16.html",target:"_blank",rel:"noopener noreferrer"}},[n._v("《第16章 关于 Vue 3.0》"),e("OutboundLink")],1),n._v("**。")]),n._v(" "),e("h2",{attrs:{id:"_1-4-xss-漏洞填补"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_1-4-xss-漏洞填补"}},[n._v("#")]),n._v(" "),e("strong",[n._v("1.4 XSS 漏洞填补")])]),n._v(" "),e("p",[n._v("模板引擎还可以协助预防下 XSS 相关漏洞。我们知道，XSS 的整个攻击过程大概为： (1) 通常页面中包含的用户输入内容都在固定的容器或者属性内，以文本的形式展示。 (2) 攻击者利用这些页面的用户输入片段，拼接特殊格式的字符串，突破原有位置的限制，形成了代码片段。 (3) 攻击者通过在目标网站上注入脚本，使之在用户的浏览器上运行，从而引发潜在风险。")]),n._v(" "),e("p",[n._v("避免 XSS 的方法之一主要是将用户所提供的内容进行过滤，而大多数模板引擎会自带 HTML 转义功能。在 Vue 中，默认的数据绑定方式（双大括号、"),e("code",[n._v("v-bind")]),n._v("等）会进行 HTML 转义，将数据解释为普通文本，而非 HTML 代码。来感受下这堆正则和转义，篇幅关系，只贴一部分来观摩下：")]),n._v(" "),e("div",{staticClass:"language-text line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v('// 元素标签和属性相关的正则表达式\nconst attribute = /^\\s*([^\\s"\'&lt;>\\/=]+)(?:\\s*(=)\\s*(?:"([^"]*)"+|\'([^\']*)\'+|([^\\s"\'=&lt;>`]+)))?/;\nconst dynamicArgAttribute = /^\\s*((?:v-[\\w-]+:|@|:|#)\\[[^=]+\\][^\\s"\'&lt;>\\/=]*)(?:\\s*(=)\\s*(?:"([^"]*)"+|\'([^\']*)\'+|([^\\s"\'=&lt;>`]+)))?/;\nconst ncname = `[a-zA-Z_][\\\\-\\\\.0-9_a-zA-Z${unicodeRegExp.source}]*`;\nconst qnameCapture = `((?:${ncname}\\\\:)?${ncname})`;\nconst startTagOpen = new RegExp(`^&lt;${qnameCapture}`);\nconst startTagClose = /^\\s*(\\/?)>/;\nconst endTag = new RegExp(`^&lt;\\\\/${qnameCapture}[^>]*>`);\nconst doctype = /^&lt;!DOCTYPE [^>]+>/i;\n// 避免注释中被处理掉\nconst comment = /^&lt;!\\--/;\nconst conditionalComment = /^&lt;!\\[/;\n\n// 特殊元素处理\nexport const isPlainTextElement = makeMap("script,style,textarea", true);\nconst reCache = {};\n\n// 转义\nconst decodingMap = {\n  "&amp;lt;": "&lt;",\n  "&amp;gt;": ">",\n  "&amp;quot;": \'"\',\n  "&amp;amp;": "&amp;",\n  "&amp;#10;": "\\n",\n  "&amp;#9;": "\\t",\n  "&amp;#39;": "\'"\n};\n')])]),n._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[n._v("1")]),e("br"),e("span",{staticClass:"line-number"},[n._v("2")]),e("br"),e("span",{staticClass:"line-number"},[n._v("3")]),e("br"),e("span",{staticClass:"line-number"},[n._v("4")]),e("br"),e("span",{staticClass:"line-number"},[n._v("5")]),e("br"),e("span",{staticClass:"line-number"},[n._v("6")]),e("br"),e("span",{staticClass:"line-number"},[n._v("7")]),e("br"),e("span",{staticClass:"line-number"},[n._v("8")]),e("br"),e("span",{staticClass:"line-number"},[n._v("9")]),e("br"),e("span",{staticClass:"line-number"},[n._v("10")]),e("br"),e("span",{staticClass:"line-number"},[n._v("11")]),e("br"),e("span",{staticClass:"line-number"},[n._v("12")]),e("br"),e("span",{staticClass:"line-number"},[n._v("13")]),e("br"),e("span",{staticClass:"line-number"},[n._v("14")]),e("br"),e("span",{staticClass:"line-number"},[n._v("15")]),e("br"),e("span",{staticClass:"line-number"},[n._v("16")]),e("br"),e("span",{staticClass:"line-number"},[n._v("17")]),e("br"),e("span",{staticClass:"line-number"},[n._v("18")]),e("br"),e("span",{staticClass:"line-number"},[n._v("19")]),e("br"),e("span",{staticClass:"line-number"},[n._v("20")]),e("br"),e("span",{staticClass:"line-number"},[n._v("21")]),e("br"),e("span",{staticClass:"line-number"},[n._v("22")]),e("br"),e("span",{staticClass:"line-number"},[n._v("23")]),e("br"),e("span",{staticClass:"line-number"},[n._v("24")]),e("br"),e("span",{staticClass:"line-number"},[n._v("25")]),e("br"),e("span",{staticClass:"line-number"},[n._v("26")]),e("br"),e("span",{staticClass:"line-number"},[n._v("27")]),e("br")])]),e("p",[n._v("当然，如果你一定要输出 HTML 代码，也可以使用"),e("code",[n._v("v-html")]),n._v("指令输出。官方文档也有特殊说明：你的站点上动态渲染的任意 HTML 可能会非常危险，因为它很容易导致 XSS 攻击。请只对可信内容使用 HTML 插值，绝不要对用户提供的内容使用插值。")]),n._v(" "),e("p",[n._v("Vue 中大多数能力都依赖于模板引擎，包括组件化管理、事件管理、Vue 实例、生命周期等等，更多的能力阅读，大家感兴趣的可以去翻一下 Vue 源码，相信你理解了 AST、虚拟 DOM、数据绑定相关的机制之后，再去翻阅源码看具体的实现也不再是难事了。")]),n._v(" "),e("p",[n._v("完整内容可在电子书网站查看： "),e("strong",[e("a",{attrs:{href:"https://link.zhihu.com/?target=https%3A//godbasin.github.io/vue-ebook/",target:"_blank",rel:"noopener noreferrer"}},[n._v("深入理解Vue.js实战"),e("OutboundLink")],1)])])])}),[],!1,null,null,null);e.default=a.exports}}]);